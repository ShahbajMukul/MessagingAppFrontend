@page "/register"
@using System.Text.RegularExpressions
@inject MessagingService messagingService 
@inject CryptographyService cryptographyService 
@inject NavigationManager navigationManager 
@inject Blazored.LocalStorage.ILocalStorageService localStorages

<PageTitle>MessagingApp - Register</PageTitle>


@* ... (Keep your existing HTML structure: container, card, MudText, EditForm etc.) ... *@
<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow" style="width: 450px;">
        @* ... Header ... *@
        <MudText Typo="Typo.h2" Color="Color.Primary" Class="text-center mb-4">NEXUS</MudText>
        <MudText Typo="Typo.subtitle1" Class="text-center">Secure End-to-End Encrypted Messaging</MudText>
        <EditForm Model="registrationPayload" FormName="RegistrationForm" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" /> @* Use text-danger for Bootstrap styling *@

            @if (!string.IsNullOrEmpty(registrationErrorMessage)) // Display specific error message
            {
                <div class="alert alert-danger">@registrationErrorMessage</div>
            }
            @if (isLoading)
            {
                <div class="text-center my-2">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText>Registering...</MudText>
                </div>
            }

            @* ... Input Fields (InputText, ValidationMessage etc.) - Keep as they are ... *@
            <div class="mb-3">
                <label class="form-label">First Name</label>
                <InputText class="form-control" @bind-Value="registrationPayload.FirstName" />
                <ValidationMessage For="@(() => registrationPayload.FirstName)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Last Name</label>
                <InputText class="form-control" @bind-Value="registrationPayload.LastName" />
                <ValidationMessage For="@(() => registrationPayload.LastName)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Username</label>
                <InputText class="form-control" @bind-Value="registrationPayload.Username" />
                <ValidationMessage For="@(() => registrationPayload.Username)" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText class="form-control" @bind-Value="registrationPayload.Email" />
                <ValidationMessage For="@(() => registrationPayload.Email)" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText class="form-control" type="password" @bind-Value="registrationPayload.Password" />
                <ValidationMessage For="@(() => registrationPayload.Password)" />
            </div>

@*             <button type="submit" class="btn btn-primary w-100 mb-2" disabled="@isLoading">Register</button> *@
            <MudButton Class="btn btn-primary w-100 mb-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@isLoading" @onclick="RegisterUser">Register</MudButton>
            <MudButton FullWidth="true" Color="Color.Secondary" OnClick="@(() => GoTo("login"))" Disabled="@isLoading">Already have an account? Login</MudButton>

        </EditForm>
    </div>
</div>

@code {


    private bool _open;

    private RegistrationPayload registrationPayload = new();
    private ApiResponse<RegiLoginResult>? regiResult;
    private string? registrationErrorMessage = string.Empty; // Store only the error message string
    private bool isLoading = false;
    // MudTextField<string> pwField1;


    protected override async Task OnInitializedAsync()
    {
        await cryptographyService.GenerateKeysAsync();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     Console.WriteLine("page loaded");
    //     if (firstRender)
    //     {
    //         try
    //         {
    //             // Generate keys AFTER the first render on the client
    //             await cryptographyService.GenerateKeysAsync();
    //             // You might want to update the UI or state if needed here
    //             // For registration, maybe not critical until submission
    //             // StateHasChanged(); // Only if UI depends on keys immediately
    //         }
    //         catch (JSException ex)
    //         {
    //             // Specific catch for JS interop errors
    //             registrationErrorMessage = $"Error initializing cryptography: {ex.Message}. Ensure crypto JS file is loaded.";
    //             StateHasChanged(); // Update UI to show this critical error
    //         }
    //         catch (Exception ex)
    //         {
    //             // Catch other potential errors during key generation
    //             registrationErrorMessage = $"An unexpected error occurred during initialization: {ex.Message}";
    //             StateHasChanged(); // Update UI
    //         }
    //     }
    // }


    private async Task RegisterUser()
    {
        registrationPayload.PublicKey = cryptographyService.PublicKeyString;
        try
        {
            isLoading = true;

            regiResult = await messagingService.RegisterUserAsync(registrationPayload);

            if (regiResult == null || regiResult.Data == null)
            {
                regiResult = new ApiResponse<RegiLoginResult>
                    {
                        ErrorMessage = "No response received from the server. Please check your connection."
                    };
            }
            //success case:
            await SaveUserInfo(regiResult.Data);
            navigationManager.NavigateTo("/login");

        }
        catch (OperationCanceledException)
        {
            regiResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = "The request timed out. Please try again later."
                };
        }
        catch (HttpRequestException ex)
        {
            regiResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = $"Network error: {ex.Message}"
                };
        }
        catch (Exception ex)
        {
            // Handle any unexpected exceptions
            regiResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = $"An unexpected error occurred: {ex.Message}"
                };
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI updates after the async operation
        }
    }

    private async Task SaveUserInfo(RegiLoginResult data)
    {
        await localStorage.SetItemAsync<RegiLoginResult>("UserData", data);
        // encrypt these later
        await localStorage.SetItemAsync<string>("PublicKey", cryptographyService.PublicKeyString ?? throw new ArgumentNullException());
        await localStorage.SetItemAsync<string>("PrivateKey", cryptographyService.PrivateKeyString ?? throw new ArgumentNullException());

        messagingService.SetAuthHeader(data.Token);
    }

    private void GoTo(string link)
    {
        navigationManager.NavigateTo($"/{link}");
    }


    // private IEnumerable<string> PasswordStrength(string pw)
    // {
    //     if (string.IsNullOrWhiteSpace(pw))
    //     {
    //         yield return "Password is required!";
    //         yield break;
    //     }
    //     if (pw.Length < 8)
    //         yield return "Password must be at least of length 8";
    //     if (!Regex.IsMatch(pw, @"[A-Z]"))
    //         yield return "Password must contain at least one capital letter";
    //     if (!Regex.IsMatch(pw, @"[a-z]"))
    //         yield return "Password must contain at least one lowercase letter";
    //     if (!Regex.IsMatch(pw, @"[0-9]"))
    //         yield return "Password must contain at least one digit";
    // }

    // private string PasswordMatch(string arg)
    // {
    //     if (pwField1.Value != arg)
    //         return "Passwords don't match";
    //     return null;
    // }
}