@page "/login"
@using MessagingApp.Shared.Models.Payloads
@inject MessagingService MessagingService
<PageTitle>MessagingApp</PageTitle>


<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow" style="width: 450px;">
        <MudText Typo="Typo.h1" Color="Color.Primary" Class="text-center mb-4">NEXUS</MudText>
            <MudText Typo="Typo.subtitle1" Class="text-center">Secure End-to-End Encrypted Messaging</MudText>
        <EditForm Model="loginPayload" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-error" />

            @if (loginResult != null && !string.IsNullOrEmpty(loginResult.ErrorMessage))
            {
                <div class="alert alert-danger">@loginResult.ErrorMessage</div>
            }

            <div class="mb-3">
                <label  class="form-label">Username</label>
                <InputText class="form-control" @bind-Value="loginPayload.Username" />
                <ValidationMessage For="@(() => loginPayload.Username)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText  class="form-control" type="password" @bind-Value="loginPayload.Password" />
                <ValidationMessage For="@(() => loginPayload.Password)" />

            </div>


            <button type="submit" class="btn btn-primary w-100">Login</button>
            <MudButton Color="Color.Secondary" OnClick="NevigateToRegister">Don't have an account? Register</MudButton>
        </EditForm>
    </div>
</div>

@code {
    private LoginPayload loginPayload = new();
    private ApiResponse<RegiLoginResult>? loginResult;
    private bool isLoading = false;


    protected override void OnInitialized()
    {
        // No need to reinitialize since we already have "= new()" above
        // But we can set default values if needed
        // loginPayload.PublicKey = "ThisIsATestPublicKey";
        cryptographyService.GenerateKeysAsync();
    }

    private async Task LoginUser()
    {
        loginPayload.PublicKey = cryptographyService.PublicKey.ToString() ?? throw new ArgumentNullException();
        try
        {
            // Add loading state if needed
            isLoading = true;

            loginResult = await MessagingService.LoginUserAsync(loginPayload);

            if (loginResult == null || loginResult.Data == null)
            {
                loginResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = "No response received from the server. Please check your connection."
                };
            }
            // success case: 
            await SaveUserData(loginResult.Data);
            navigationManager.NavigateTo("/test");
        }
        catch (OperationCanceledException)
        {
            loginResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = "The request timed out. Please try again later."
                };
        }
        catch (HttpRequestException ex)
        {
            loginResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = $"Network error: {ex.Message}"
                };
        }
        catch (Exception ex)
        {
            // Handle any unexpected exceptions
            loginResult = new ApiResponse<RegiLoginResult>
                {
                    ErrorMessage = $"An unexpected error occurred: {ex.Message}"
                };
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI updates after the async operation
        }
    }


    private async Task SaveUserData(RegiLoginResult data)
    {
        await localStorage.SetItemAsync<RegiLoginResult>("UserData", data);

        // encrypt these later
        await localStorage.SetItemAsync<string>("PublicKey", cryptographyService.PublicKey.ToString());
        await localStorage.SetItemAsync<string>("PrivateKey", cryptographyService.PrivateKey.ToString());
    }

    private void NevigateToRegister()
    {
        navigationManager.NavigateTo("/register");
    }
}