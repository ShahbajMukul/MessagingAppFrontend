@page "/contacts"
@inject IDialogService DialogService
@inject MessagingService MessagingService
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<MudPaper Class="mx-n6 mx-auto" Elevation="2">
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Contacts</MudText>

    <MudToolBar Dense="true" Class="mb-3">
        <MudTextField @ref="_searchTextField"
                      T="string"
                      Value="_searchTerm"
                      ValueChanged="@OnSearchTermChanged"
                      Placeholder="Search a new user"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      DebounceInterval="0"
                      Clearable="true"
                      OnKeyDown="HandleEnterForSearch"
                      OnClearButtonClick="@(() => { _searchTerm = string.Empty; _searchResults = null; _searchAttempted = false; })"
                      Immediate="true"
                      Class="flex-grow-1" />
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="ExecuteSearch"
                   Disabled="_isLoading"
                   Class="ml-2">
            Search
        </MudButton>
    </MudToolBar>

    <MudDivider Class="my-3"/>

    @if (_isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (_searchAttempted)
    {
        @if (_searchResults?.Any() == true)
        {
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2 mb-2">Search Results</MudText>
            <MudList Dense="true" Clickable="true" T="SearchResult" Class="mb-4">
                @foreach (var result in _searchResults)
                {
                    <MudNavLink @onclick="() => SelectSearch(result)" Class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <MudAvatar Color="Color.Secondary" Size="Size.Medium" Class="me-3">
                                @GetInitials(result.FirstName!, result.LastName!)
                            </MudAvatar>
                            <MudText Typo="Typo.h5">@result.FirstName @result.LastName</MudText>
                        </div>
                    </MudNavLink>
                }
            </MudList>
        }
        else
        {
            <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-3">No users found matching "@_searchTerm".</MudText>
        }
    }

    @if(_contactsResults == null && !string.IsNullOrEmpty(contactsBodyText))
    {
        <MudAlert Severity="Severity.Error">@contactsBodyText</MudAlert>
    }
    else if(_contactsResults != null)
    {
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2 mb-2">Your Contacts</MudText>
        <MudList Dense="true" Clickable="true" T="ContactsResult">
            @foreach (var contact in _contactsResults)
            {
                if (string.IsNullOrEmpty(_searchTerm) || searched(contact))
                {
                    <MudListItem OnClick="@(() => SelectContact(contact))">
                        @* Avatar stays on the left *@
                        <MudStack Row="true" Spacing="1">

                            <MudAvatar Color="Color.Secondary" Size="Size.Medium" Class="me-5">@GetInitials(contact!.FirstName!, contact!.LastName!)</MudAvatar>

                            <MudText Typo="Typo.h5">@contact.FirstName</MudText>
                            <MudText Typo="Typo.h5">@contact.LastName</MudText>
                        </MudStack>
                    </MudListItem>
                }
            }
        </MudList>
    }
</MudPaper>

@code {
    [Parameter]
    public EventCallback<Contact> OnContactSelected { get; set; }
    private string contactsBodyText = string.Empty;
    private string _searchTerm = string.Empty;
    private MudTextField<string> _searchTextField = default!;
    private bool _isLoading = false;
    private bool _searchAttempted = false; // Track if a search has been performed

    private RegiLoginResult? rlResult;
    private string privKey;
    private string pubKey;

    // For API to fill
    private List<ContactsResult>? _contactsResults;
    private List<SearchResult>? _searchResults;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Retrieve and assign keys and user data as needed
                rlResult = await localStorage.GetItemAsync<RegiLoginResult>("UserData");
                privKey = await localStorage.GetItemAsStringAsync("PrivateKey") ?? string.Empty;
                pubKey = await localStorage.GetItemAsStringAsync("PublicKey") ?? string.Empty;

                var contactsApiResult = await messagingService.GetContactsAsync();
                if (contactsApiResult.IsSuccess)
                {
                    _contactsResults = contactsApiResult.Data;
                }
                else
                {
                    contactsBodyText = contactsApiResult.ErrorMessage ?? "Failed to load contacts";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ContactsPanel ERROR in OnAfterRenderAsync (firstRender): {ex}");
                Snackbar.Add("Failed to load contacts: " + ex.Message, Severity.Error);
            }
            StateHasChanged();
        }
    }

    // Only updates the search term model
    private void OnSearchTermChanged(string newSearchTerm)
    {
        _searchTerm = newSearchTerm;
        if (_searchAttempted)
        {
            _searchResults = null;
            _searchAttempted = false;
        }
    }

    private bool searched(ContactsResult contact)
    {
        return contact.FirstName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
               contact.LastName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
               contact.Username.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private async Task HandleEnterForSearch(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
        {
            await ExecuteSearch();
        }
    }

    private async Task ExecuteSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            Snackbar.Add("Please enter a search term.", Severity.Warning);
            _searchResults = null;
            _searchAttempted = false;
            StateHasChanged();
            return;
        }

        _isLoading = true;
        _searchAttempted = true;
        _searchResults = null;
        StateHasChanged();

        ApiResponse<List<SearchResult>>? apiResponse = null;
        try
        {
            apiResponse = await MessagingService.SearchUserAsync(_searchTerm);
            if (apiResponse.Data != null && apiResponse.IsSuccess)
            {
                Console.WriteLine($"Search successful. Found {apiResponse.Data.Count} results.");
                _searchResults = apiResponse.Data;
            }
            else
            {
                Console.WriteLine($"Search failed. API Error: {apiResponse.ErrorMessage}");
                _searchResults = new List<SearchResult>();
                Snackbar.Add(apiResponse.ErrorMessage ?? "Search failed or no results found.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during search API call: {ex}");
            _searchResults = new List<SearchResult>();
            Snackbar.Add($"Error during search: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectContact(ContactsResult contact)
    {
        Console.WriteLine($"Open conversation for UserID: {contact.UserID}");
        string initials = GetInitials(contact.FirstName, contact.LastName);
        await localStorage.SetItemAsync<int>("contactID", contact.UserID);
        await localStorage.SetItemAsStringAsync("contactInitials", initials);
        navigationManager.NavigateTo($"/conversation");
    }

    private async Task SelectSearch(SearchResult result)
    {
        Console.WriteLine($"Open conversation for UserID: {result.UserID}");
        string initials = GetInitials(result.FirstName, result.LastName);
        await localStorage.SetItemAsync<int>("contactID", result.UserID);
        await localStorage.SetItemAsStringAsync("contactInitials", initials);
        navigationManager.NavigateTo($"/conversation");
    }

    private string GetInitials(string fName, string lName)
    {
        return !string.IsNullOrWhiteSpace(fName) && !string.IsNullOrWhiteSpace(lName)
            ? fName[0].ToString().ToUpper() + lName[0].ToString().ToUpper()
            : string.Empty;
    }
}